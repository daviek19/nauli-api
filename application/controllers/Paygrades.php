<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

class Paygrades extends REST_Controller {

    function __construct() {

        parent::__construct();
        $this->load->model('paygrades_model');
    }

    public function index_get() {
        //Get params
        $company_id = (int) $this->get('company_id');

        log_message("debug", "*********** index_get start company_id {$company_id} ***********");

        if (!empty($company_id)) {
            $result = $this->paygrades_model->get_all_paygrades($company_id);

            $this->response([
                'response' => $result,
                'status' => TRUE,
                'description' => 'To get all [/paygrades/company_id/] or to get single [/paygrades/company_id/paygrade_id]'
                    ], REST_Controller::HTTP_OK);
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'No company_id was suplied',
                'description' => 'To get all [/paygrades/company_id/] or to get single [/paygrades/company_id/paygrade_id]'
                    ], REST_Controller::HTTP_NOT_FOUND);
        }
    }

    public function index_put() {

        log_message("debug", "*********** index_put start ***********");

        $data = array(
            'company_id' => $this->put('company_id'),
            'pay_grade_name' => $this->put('pay_grade_name'),
        );

        log_message("debug", "Getting ready to insert... " . json_encode($data));

        if (empty($data['pay_grade_name'])) {

            log_message("debug", "index_put Trying to insert empty paygrade name... ");

            return $this->response([
                        'status' => FALSE,
                        'message' => 'Trying to create empty paygrade name',
                        'description' => 'create paygrade put/ {company_id,paygrade_name} name cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        if ($this->paygrades_model->paygrade_exists($data['pay_grade_name'], $data['company_id']) == TRUE) {

            log_message("debug", "index_put Trying to duplicate a paygrade name... ");

            return $this->response([
                        'response' => $data,
                        'status' => FALSE,
                        'message' => 'Trying to duplicate a paygrade name',
                        'description' => 'create paygrade put/ {company_id,paygrade_name} name cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        $response = $this->paygrades_model->create_paygrade($data);

        if ($response == FALSE) {

            log_message("debug", "index_put Database refused. Try again!... ");

            return $this->response([
                        'response' => $data,
                        'status' => FALSE,
                        'message' => 'Database refused. Try again!',
                        'description' => 'create paygrade put/ {company_id,paygrade_name} name cannot be null'
                            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR);
        }

        log_message("debug", "index_put Record created!... ");

        return $this->response([
                    'response' => $response,
                    'status' => true,
                    'message' => 'Department created!',
                    'description' => 'To get all [/paygrades/company_id/] or to get single [/paygrades/company_id/paygrade_id]'
                        ], REST_Controller::HTTP_CREATED);
    }

    public function find_get() {

        $paygrade_id = (int) $this->get('pay_grade_id');

        log_message("debug", "*********** find_get start paygrade_id {$paygrade_id} ***********");

        if (empty($paygrade_id)) {

            return $this->response([
                        'status' => FALSE,
                        'message' => 'No paygrade_id was suplied',
                        'description' => 'To get all [/paygrades/company_id/] or to get single [/paygrades/find/paygrade_id]'
                            ], REST_Controller::HTTP_NOT_FOUND);
        }

        $result = $this->paygrades_model->get_single_paygrade("", $paygrade_id);

        $this->response([
            'response' => $result,
            'status' => TRUE,
            'description' => 'To get all [/paygrades/company_id/] or to get single [/paygrades/find/paygrade_id]'
                ], REST_Controller::HTTP_OK);
    }

    public function index_post() {

        $data = [
            'pay_grade_id' => $this->post('pay_grade_id'), // Automatically generated by the model
            'pay_grade_name' => $this->post('pay_grade_name'),
        ];

        if (empty($data['pay_grade_id']) || empty($data['pay_grade_name'])) {

            log_message("debug", "index_post Empty pay_grade_id/pay_grade_name supplied... ");

            return $this->response([
                        'response' => $data,
                        'status' => FALSE,
                        'message' => 'Empty pay_grade_id/pay_grade_name supplied',
                        'description' => 'Update paygrade post/ {pay_grade_id,pay_grade_name} name and id cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        if ($this->paygrades_model->paygrade_id_exists($data['pay_grade_id']) != TRUE) {

            log_message("debug", "index_POST Record does not exist... ");

            return $this->response([
                        'response' => $data,
                        'status' => FALSE,
                        'message' => 'This paygrade you are trying to update does not exist',
                        'description' => 'Update paygrade post/ {pay_grade_id,pay_grade_name} name and id cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        $response = $this->paygrades_model->update_paygrade($data);

        if ($response == FALSE) {

            return $this->response([
                        'response' => $data,
                        'status' => FALSE,
                        'message' => 'Database refused. Try again!',
                        'description' => 'Update paygrade post/ {pay_grade_id,pay_grade_name} name and id cannot be null'
                            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR);
        }

        log_message("debug", "Paygrade Updated...");

        return $this->response([
                    'response' => $response,
                    'status' => TRUE,
                    'message' => 'Paygrade Updated!',
                    'description' => 'To get all [/paygrades/company_id/] or to get single [/paygrades/company_id/pay_grade_id]'
                        ], REST_Controller::HTTP_OK);
    }

    /**
     * Documentation
     * GET paygrades/earning_deductions/company_id/paygrade_id
     * This call will allow you to get 
     * a paygrades earning and deduction codes.
     * In addtion to that it will supply a list
     * of missing earning and deduction codes
     * that can be added to the articular paygrade         
     *  paygrade
     * @author		david@venture-labs.co.ke
     */
    public function earning_deductions_get() {

        $paygrade_id = (int) $this->get('pay_grade_id');

        log_message("debug", "*********** find_get start paygrade_id {$paygrade_id} ***********");

        if (empty($paygrade_id)) {

            return $this->response([
                        'status' => FALSE,
                        'message' => 'No paygrade_id was suplied',
                        'description' => 'Usage GET paygrades/earning_deductions/paygrade_id'
                            ], REST_Controller::HTTP_NOT_FOUND);
        }

        $earning_deductions = $this->paygrades_model->pay_grade_earnings_deductions($paygrade_id);
        $earning_deductions_dropdown = $this->paygrades_model->pay_grade_earning_deduction_dropdown($paygrade_id);

        if (empty($earning_deductions)) {
            return $this->response([
                        'status' => TRUE,
                        'response' => "",
                        'available_earning_deductions' => $earning_deductions_dropdown,
                        'message' => 'Not Found',
                        'description' => 'Usage GET paygrades/earning_deductions/paygrade_id'
                            ], REST_Controller::HTTP_NOT_FOUND);
        }

        $this->response([
            'response' => $earning_deductions,
            'available_earning_deductions' => $earning_deductions_dropdown,
            'status' => TRUE,
            'description' => 'Usage GET paygrades/earning_deductions/paygrade_id',
                ], REST_Controller::HTTP_OK);
    }

    public function delete_earning_deductions_post() {
        $id = $this->post('id');

        log_message("debug", "*********** earning_deductions_post {$id} ***********");

        // Does this earning_deduction exist?
        if (empty($id)) {

            return $this->response([
                        'status' => FALSE,
                        'message' => 'No id was suplied',
                        'description' => 'Usage Delete paygrades/earning_deductions ::id'
                            ], REST_Controller::HTTP_NO_CONTENT);
        }
        // Destroy it
        if ($this->paygrades_model->earning_deductions_delete($id)) {
            $this->response([
                'status' => TRUE,
                'message' => 'Earning Deduction was deleted'
                    ], REST_Controller::HTTP_OK); // NO_CONTENT (204) being the HTTP response code  
        } else {
            $this->response([
                'status' => FALSE,
                'message' => 'Earning Deduction could not be deleted'
                    ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR); // NO_CONTENT (204) being the HTTP response code 
        }
    }

    public function create_earning_deductions_put() {

        log_message("debug", "*********** create_earning_deductions_put start ***********");

        $data = array(
            'pay_grade_id' => $this->put('pay_grade_id'),
            'earning_deduction_id' => $this->put('earning_deduction_id'),
            'amount' => $this->put('amount'),
        );

        log_message("debug", "Getting ready to insert... " . json_encode($data));


        if (empty($data['pay_grade_id'])) {

            log_message("debug", "Create_earning_deductions_put Trying to insert empty pay_grade_id... ");

            return $this->response([
                        'status' => FALSE,
                        'message' => 'Paygrade Id was not supplied',
                        'description' => 'create_earning_deductions put/ {pay_grade_id,earning_deduction_id,amount} cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        if (empty($data['earning_deduction_id'])) {

            log_message("debug", "Create_earning_deductions_put Trying to insert empty earning_deduction_id... ");

            return $this->response([
                        'status' => FALSE,
                        'message' => 'earning_deduction_id was not supplied',
                        'description' => 'create_earning_deductions put/ {pay_grade_id,earning_deduction_id,amount} cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        if (empty($data['amount'])) {

            log_message("debug", "Create_earning_deductions_put Trying to insert empty amount... ");

            return $this->response([
                        'status' => FALSE,
                        'message' => 'amount was not supplied',
                        'description' => 'create_earning_deductions put/ {pay_grade_id,earning_deduction_id,amount} cannot be null'
                            ], REST_Controller::HTTP_BAD_REQUEST);
        }

        $response = $this->paygrades_model->earning_deductions_create($data);

        if ($response == FALSE) {

            log_message("debug", "Create_earning_deductions_put Database refused. Try again!... ");

            return $this->response([
                        'response' => $data,
                        'status' => FALSE,
                        'message' => 'Database refused. Try again!',
                        'description' => 'create_earning_deductions_put put/ {pay_grade_id,earning_deduction_id,amount} cannot be null'
                            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR);
        }
        log_message("debug", "index_put Record created!... ");

        return $this->response([
                    'response' => $response,
                    'status' => TRUE,
                    'message' => 'Paygrade Earning Deduction was created!',
                    'description' => 'create_earning_deductions_put put/ {pay_grade_id,earning_deduction_id,amount} cannot be null'
                        ], REST_Controller::HTTP_CREATED);
    }

}
